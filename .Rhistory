names(pvo_list) <- var_respostas
}
result <- list('pvo' = pvo_list)
return(result)
}
#grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
#
grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
# Verifique os valores ajustados e os dados no modelo
print(modelo_exemplo$ajustados)
print(modelo_exemplo$dados)
# Ajustando o modelo de regressão linear
modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2")],
rl_dataset[, c("Resposta.1")])
# Verificando os valores ajustados e resíduos
print(modelo_exemplo$ajustados)
print(modelo_exemplo$residuos)
# Criando novos valores de preditores para fazer a predição
novos_preditores <- matrix(c(2, 4, 5, 6), nrow = 2, byrow = TRUE)
# Realizando a predição
resultado_predicao <- predicao(modelo_exemplo, novos_preditores)
# Gerando gráficos de Preditos vs Observados
graficos_pvo <- grafico(modelo_exemplo, tipo = 'pvo')
# Exibindo os gráficos gerados
print(graficos_pvo$pvo[[1]])  # Exibindo o primeiro gráfico PVO
grafico <- function(modelo, tipo = c('pvo', 'rvp', 'qqplot')) {
# Verificar se a classe do modelo inserido pelo usuário é "modelo_linear"
if (!"modelo_linear" %in% class(modelo)) {
stop("Erro: o objeto fornecido não é um modelo linear válido.")
}
result <- list()
pvo_list <- list()
rvp_list <- list()
qq_list <- list()
var_respostas <- colnames(modelo$coeficientes)
var_preditoras <- rownames(modelo$coeficientes)[-1]
getPlot <- function(dados, x, y) {
return(ggplot(dados, aes(x = .data[[x]], y = .data[[y]])) +
theme_classic())
}
# Gráfico de Valores Preditos vs Observados (pvo)
if ("pvo" %in% tipo) {
for (var_resposta in var_respostas) {
# Verificar se o modelo tem valores ajustados e dados observados
if (is.null(modelo$ajustados) || is.null(modelo$dados)) {
stop("Erro: o modelo não contém valores ajustados ou dados observados.")
}
# Criando o dataframe para o gráfico
temp_dado <- data.frame(ajustado = modelo$ajustados[, var_resposta],
observado = modelo$dados[, var_resposta])
# Verificar se os dados estão corretos
print(head(temp_dado))
grafico <- getPlot(temp_dado, x = "observado", y = "ajustado") +
geom_point() +
labs(
title = paste('Valores preditos x observados (', var_resposta, ')'),
x = 'Observados',
y = 'Preditos'
)
pvo_list <- append(pvo_list, list(grafico))
}
names(pvo_list) <- var_respostas
}
result <- list('pvo' = pvo_list)
return(result)
}
# Carregando o conjunto de dados do pacote
data(rl_dataset)
# Ajustando o modelo de regressão linear com múltiplas preditoras e uma resposta
modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3")],
rl_dataset[, c("Resposta.1")])
# Criando novos valores de preditores para fazer a predição
novos_preditores <- matrix(c(2, 4, 6, 3, 1, 7), nrow = 2, byrow = TRUE)
# Realizando a predição
resultado_predicao <- predicao(modelo_exemplo, novos_preditores)
# Gerando os três tipos de gráficos: PVO, RVP, QQ-plot
graficos_todos <- grafico(modelo_exemplo, tipo = c('pvo', 'rvp', 'qqplot'))
# Exibindo o primeiro gráfico de Preditos vs Observados (PVO)
print(graficos_todos$pvo[[1]])
# Verificando os valores ajustados e dados no modelo
print(modelo_exemplo$ajustados)  # Deve conter os valores ajustados (preditos)
print(modelo_exemplo$dados)      # Deve conter os dados originais (observados)
grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
#' @title Gráficos de verificação do modelo linear
#' @description
#' A função \code{grafico} é utilizada para criação de gráficos para verificação do modelo linear resultante. Válida tanto para regressão linear simples quanto para regressão linear multivariada. Ela permite visualizar o ajuste do modelo e verificar os pressupostos dos resíduos.
#'
#' @param modelo Modelo de regressão linear. Deve ser, obrigatoriamente, da classe \code{"modelo_linear"}. Caso contrário, a função gerará um erro.
#' @param tipo Vetor do tipo \code{char} que especifica os tipos de gráficos desejados. Os valores aceitos são:
#' \describe{
#'   \item{pvo}{Gráfico de valores preditos x valores observados.}
#'   \item{rvp}{Gráfico de resíduos x preditora.}
#'   \item{qqplot}{QQ-plot dos resíduos.}
#' }
#'
#' @examples
#' # Carregando o conjunto de dados do pacote
#' data(rl_dataset)
#'
#' # Ajustando o modelo de regressão linear com o rl_dataset
#' modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
#'                              rl_dataset[, c("Resposta.1", "Resposta.2")])
#'
#' # Gerando gráficos de verificação do modelo ajustado
#' # Gráfico de Valores Preditos x Observados
#' grafico(modelo_exemplo, tipo = "pvo")
#'
#' # Gráfico de Resíduos x Preditoras
#' grafico(modelo_exemplo, tipo = "rvp")
#'
#' # QQ-plot dos Resíduos
#' grafico(modelo_exemplo, tipo = "qqplot")
#'
#' @import ggplot2
#' @export
grafico <- function(modelo, tipo = c('pvo', 'rvp', 'qqplot')) {
# verificar se a classe do modelo inserido pelo usuário é "modelo_linear":
if (!"modelo_linear" %in% class(modelo)) {
stop("Erro: o objeto fornecido não é um modelo linear válido.")
}
result <- list()
pvo_list <- list()
rvp_list <- list()
qq_list <- list()
var_respostas <- colnames(modelo$coeficientes)
var_preditoras <- rownames(modelo$coeficientes)[-1]
getPlot <- function(dados, x, y) {
return(ggplot(dados, aes(x = .data[[x]], y = .data[[y]])) +
theme_classic())
}
# Gráfico de Valores Preditos vs Observados (pvo)
if("pvo" %in% tipo) {
for(var_resposta in var_respostas) {
temp_dado <- data.frame(modelo$ajustados[, var_resposta], modelo$dados[, var_resposta])
temp_colnames <-c(paste(var_resposta, "ajustado", sep = '_'),
paste(var_resposta, "observado", sep = '_'))
colnames(temp_dado) <- temp_colnames
grafico <- getPlot(temp_dado, x = temp_colnames[2], y = temp_colnames[1]) +
geom_point() +
labs(
title = paste('Valores preditos x observados (', var_resposta, ')'),
x = 'Observados',
y = 'Preditos'
)
pvo_list <- append(pvo_list,  list(grafico))
}
names(pvo_list) <- var_respostas
}
# Gráfico de Resíduos vs Preditoras (rvp)
if('rvp' %in% tipo) {
temp_nomes_list <- c()
for(var_preditora in var_preditoras) {
for(var_resposta in var_respostas) {
temp_dado <- data.frame(modelo$residuos[, var_resposta], modelo$dados[, var_preditora])
temp_colnames <-c('residuos',
paste(var_resposta, "observado", sep = '_'))
colnames(temp_dado) <- temp_colnames
grafico <- getPlot(temp_dado, y = temp_colnames[1], x = temp_colnames[2]) +
geom_point() +
geom_hline(yintercept = 0, color = 'red') +
labs(
title = paste('Resíduos (', var_resposta, ') x  preditora (', var_preditora, ')'),
y = 'Resíduos',
x = 'Preditora'
)
rvp_list <- append(rvp_list, list(grafico))
temp_nomes_list <- c(paste(var_resposta, var_preditora, sep = '_'), temp_nomes_list)
}
}
names(rvp_list) <- temp_nomes_list
}
# QQ-plot dos resíduos
if('qqplot' %in% tipo) {
for(var_resposta in var_respostas) {
temp_dado <- data.frame(modelo$residuos[, var_resposta])
colnames(temp_dado) <- var_resposta
grafico <- ggplot(temp_dado, aes(sample = .data[[var_resposta]])) +
geom_qq() +
geom_qq_line() +
labs(title = paste('QQ-plot resíduos de', var_resposta),
x = 'Quantil teórico',
y = 'Quantil amostral'
) +
theme_classic()
qq_list <- append(qq_list, list(grafico))
}
names(qq_list) <- var_respostas
}
result <- list('pvo' = pvo_list,
'rvp' = rvp_list,
'qqplot' = qq_list)
return(result)
}
#grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
#' @title Ajuste de Modelos Lineares
#' @description
#' A função \code{reg_linear} deve ser usada para ajustar modelos de regressão linear, incluindo modelos multivariados.
#'
#' @param x Variáveis preditoras do modelo. Deve ser um objeto do tipo \code{numeric} que seja coercível a uma matriz pela função \code{as.matrix}.
#' @param y Variáveis respostas do modelo. Deve ser um objeto do tipo \code{numeric} que seja coercível a uma matriz pela função \code{as.matrix}.
#'
#' @returns \code{reg_linear} retorna uma lista da classe \code{"modelo_linear"} contendo os seguintes componentes:
#' \describe{
#'   \item{coeficientes}{Os valores estimados dos coeficientes do modelo.}
#'   \item{dados}{Os dados utilizados para criar o modelo.}
#'   \item{residuos}{Os resíduos, ou seja, a diferença entre o valor observado da resposta e o valor ajustado pelo modelo.}
#'   \item{ajustados}{Os valores ajustados do modelo; ou seja, os valores preditos de \code{y} com base nos preditores \code{x}.}
#' }
#'
#' @details
#' A função ajusta um modelo de regressão linear com base nos preditores e na variável resposta fornecidos. Ela utiliza a forma matricial da regressão linear para calcular os coeficientes de ajuste.
#'
#' @examples
#' # Carregando o conjunto de dados do pacote
#' data(rl_dataset)
#'
#' # Ajustando um modelo de regressão linear simples
#' modelo_simples <- reg_linear(rl_dataset[, "Preditora.1"], rl_dataset[, "Resposta.1"])
#' modelo_simples$coeficientes
#'
#' # Ajustando um modelo de regressão linear múltipla
#' modelo_multiplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
#'                               rl_dataset[, c("Resposta.1", "Resposta.2")])
#' modelo_multiplo$coeficientes
#'
#' # Ajustando um modelo com o dataset iris
#' modelo_iris <- reg_linear(iris[, 1], iris[, 2])
#' modelo_iris$coeficientes
#'
#' @export
reg_linear <- function(x, y){
x <- as.matrix(x)
y <- as.matrix(y)
# filtrar matriz data.frame ou vetor
if (!is.numeric(x) || !is.numeric(y)) {
stop("Erro: a variável preditora (x) e a variável resposta (y) precisam ser variáveis contínuas")
}
# Verificar se x e y possuem o mesmo tamanho no banco de dados:
if (!all(sapply(x, length) != length(y))) {
stop("Erro: a variável preditora (x) e a variável resposta (y) precisam ter o mesmo número de observações")
}
# Criando a matriz X (matriz de delineamento ou matriz de regressão):
mx <- cbind(1, x)
# Estimando os coeficientes betas na forma matricial beta_hat = (X'X)^-1 X'Y (%*% é o símbolo de multiplicação matricial):
# Cálculo de X'X (%*% é o símbolo de multiplicação matricial):
mxx <- t(mx) %*% mx
# Cálculo da inversa de X'X: [1/det(mxx)] * matriz adjacente
inv_mxx <- solve(mxx)
# Cálculo de X'Y:
mxy <- t(mx) %*% y
# Logo, os betas serão:
betas <- inv_mxx %*% mxy
# Cálculo dos valores preditos (y_chapéu):
y_hat <- mx %*% betas
# Cálculo dos resíduos (e):
e <- y - y_hat
# Atribuindo nomes aos coeficientes (se possível)
if (!is.null(colnames(x))) {
rownames(betas) <- c("Intercepto", colnames(x))
} else {
rownames(betas) <- c("Intercepto", paste0("X", 1:(ncol(x))))
}
result <- list(coeficientes = betas,
residuos = e,
ajustados = y_hat,
dados = data.frame(y, x)
)
class(result) <- "modelo_linear"
return(result)
}
#' @title Função de Predição para Modelos Lineares
#' @description
#' A função \code{predicao} realiza predições a partir de um modelo de regressão linear ajustado. Ela utiliza o modelo fornecido e aplica os preditores fornecidos para calcular os valores preditos.
#' A função pode ser aplicada tanto em modelos de regressão simples quanto multivariada.
#'
#' @param modelo Um modelo de regressão linear da classe \code{"modelo_linear"}. Caso contrário, a função irá gerar um erro.
#' @param preditores Uma matriz ou data frame contendo os valores preditores. O número de preditores deve ser compatível com o modelo ajustado.
#'
#' @return Retorna um objeto da classe \code{"predicao"}, contendo:
#' \item{preditores}{Os preditores utilizados na predição (incluindo a coluna de intercepto).}
#' \item{preditos}{Os valores preditos calculados pelo modelo.}
#'
#' @examples
#' # Carregando o conjunto de dados do pacote
#' data(rl_dataset)
#'
#' # Ajustando o modelo de regressão linear com o rl_dataset
#' modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
#'                              rl_dataset[, c("Resposta.1", "Resposta.2")])
#'
#' # Fazendo predições com novos valores de preditores
#' novos_preditores <- matrix(c(3, 4, 5, 2, 1, 6, 7, 3), nrow = 2, byrow = TRUE)
#' resultado_predicao <- predicao(modelo_exemplo, novos_preditores)
#'
#'
#' resultado_predicao$preditos
#'
#' @export
predicao <- function(modelo, preditores) {
# Verificar se o modelo é da classe "modelo_linear"
if (!"modelo_linear" %in% class(modelo)) {
stop("Erro: o objeto fornecido não é um modelo linear válido.")
}
preditores <- as.matrix(preditores)
preditores <- cbind(1, preditores)  # Adiciona uma coluna de 1 para o intercepto
# Verificar se o número de preditores é compatível com os coeficientes do modelo
if (ncol(preditores) != nrow(modelo$coeficientes)) {
stop("Erro: o número de preditores não corresponde ao número de coeficientes no modelo.")
}
result <- list(
preditores = preditores,
preditos = preditores %*% as.matrix(modelo$coeficientes)
)
class(result) <- "predicao"
return(result)
}
#' @title Gráficos de verificação do modelo linear
#' @description
#' A função \code{grafico} é utilizada para criação de gráficos para verificação do modelo linear resultante. Válida tanto para regressão linear simples quanto para regressão linear multivariada. Ela permite visualizar o ajuste do modelo e verificar os pressupostos dos resíduos.
#'
#' @param modelo Modelo de regressão linear. Deve ser, obrigatoriamente, da classe \code{"modelo_linear"}. Caso contrário, a função gerará um erro.
#' @param tipo Vetor do tipo \code{char} que especifica os tipos de gráficos desejados. Os valores aceitos são:
#' \describe{
#'   \item{pvo}{Gráfico de valores preditos x valores observados.}
#'   \item{rvp}{Gráfico de resíduos x preditora.}
#'   \item{qqplot}{QQ-plot dos resíduos.}
#' }
#'
#' @examples
#' # Carregando o conjunto de dados do pacote
#' data(rl_dataset)
#'
#' # Ajustando o modelo de regressão linear com o rl_dataset
#' modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
#'                              rl_dataset[, c("Resposta.1", "Resposta.2")])
#'
#' # Gerando gráficos de verificação do modelo ajustado
#' # Gráfico de Valores Preditos x Observados
#' grafico(modelo_exemplo, tipo = "pvo")
#'
#' # Gráfico de Resíduos x Preditoras
#' grafico(modelo_exemplo, tipo = "rvp")
#'
#' # QQ-plot dos Resíduos
#' grafico(modelo_exemplo, tipo = "qqplot")
#'
#' @import ggplot2
#' @export
grafico <- function(modelo, tipo = c('pvo', 'rvp', 'qqplot')) {
# verificar se a classe do modelo inserido pelo usuário é "modelo_linear":
if (!"modelo_linear" %in% class(modelo)) {
stop("Erro: o objeto fornecido não é um modelo linear válido.")
}
result <- list()
pvo_list <- list()
rvp_list <- list()
qq_list <- list()
var_respostas <- colnames(modelo$coeficientes)
var_preditoras <- rownames(modelo$coeficientes)[-1]
getPlot <- function(dados, x, y) {
return(ggplot(dados, aes(x = .data[[x]], y = .data[[y]])) +
theme_classic())
}
# Gráfico de Valores Preditos vs Observados (pvo)
if("pvo" %in% tipo) {
for(var_resposta in var_respostas) {
temp_dado <- data.frame(modelo$ajustados[, var_resposta], modelo$dados[, var_resposta])
temp_colnames <-c(paste(var_resposta, "ajustado", sep = '_'),
paste(var_resposta, "observado", sep = '_'))
colnames(temp_dado) <- temp_colnames
grafico <- getPlot(temp_dado, x = temp_colnames[2], y = temp_colnames[1]) +
geom_point() +
labs(
title = paste('Valores preditos x observados (', var_resposta, ')'),
x = 'Observados',
y = 'Preditos'
)
pvo_list <- append(pvo_list,  list(grafico))
}
names(pvo_list) <- var_respostas
}
# Gráfico de Resíduos vs Preditoras (rvp)
if('rvp' %in% tipo) {
temp_nomes_list <- c()
for(var_preditora in var_preditoras) {
for(var_resposta in var_respostas) {
temp_dado <- data.frame(modelo$residuos[, var_resposta], modelo$dados[, var_preditora])
temp_colnames <-c('residuos',
paste(var_resposta, "observado", sep = '_'))
colnames(temp_dado) <- temp_colnames
grafico <- getPlot(temp_dado, y = temp_colnames[1], x = temp_colnames[2]) +
geom_point() +
geom_hline(yintercept = 0, color = 'red') +
labs(
title = paste('Resíduos (', var_resposta, ') x  preditora (', var_preditora, ')'),
y = 'Resíduos',
x = 'Preditora'
)
rvp_list <- append(rvp_list, list(grafico))
temp_nomes_list <- c(paste(var_resposta, var_preditora, sep = '_'), temp_nomes_list)
}
}
names(rvp_list) <- temp_nomes_list
}
# QQ-plot dos resíduos
if('qqplot' %in% tipo) {
for(var_resposta in var_respostas) {
temp_dado <- data.frame(modelo$residuos[, var_resposta])
colnames(temp_dado) <- var_resposta
grafico <- ggplot(temp_dado, aes(sample = .data[[var_resposta]])) +
geom_qq() +
geom_qq_line() +
labs(title = paste('QQ-plot resíduos de', var_resposta),
x = 'Quantil teórico',
y = 'Quantil amostral'
) +
theme_classic()
qq_list <- append(qq_list, list(grafico))
}
names(qq_list) <- var_respostas
}
result <- list('pvo' = pvo_list,
'rvp' = rvp_list,
'qqplot' = qq_list)
return(result)
}
#grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
grafico(reg_linear(iris[, c(1, 3)], iris[, c(2, 4)]), tipo = c('pvo', 'rvp', 'qqplot'))
# Carregando o dataset iris
data(iris)
# Ajustando o modelo de regressão linear com duas variáveis preditoras e duas respostas
modelo_exemplo <- reg_linear(iris[, c(1, 3)], iris[, c(2, 4)])
# Verificando os coeficientes estimados
print(modelo_exemplo$coeficientes)
# Verificando os valores ajustados (preditos)
print(modelo_exemplo$ajustados)
# Verificando os resíduos
print(modelo_exemplo$residuos)
# Criando novos valores de preditores para fazer a predição
novos_preditores <- matrix(c(5.1, 3.5, 1.4, 0.2, 6.0, 2.9, 4.5, 1.5), nrow = 2, byrow = TRUE)
# Realizando a predição com o modelo ajustado
resultado_predicao <- predicao(modelo_exemplo, novos_preditores)
# Gerando o gráfico de Preditos vs Observados
graficos_pvo <- grafico(modelo_exemplo, tipo = 'pvo')
# Exibindo o gráfico de Preditos vs Observados
if (length(graficos_pvo$pvo) > 0) {
print(graficos_pvo$pvo[[1]])
} else {
print("Nenhum gráfico PVO foi gerado.")
}
# Gerando o gráfico de Resíduos vs Preditoras
graficos_rvp <- grafico(modelo_exemplo, tipo = 'rvp')
# Exibindo o gráfico de Resíduos vs Preditoras
if (length(graficos_rvp$rvp) > 0) {
print(graficos_rvp$rvp[[1]])
} else {
print("Nenhum gráfico RVP foi gerado.")
}
data(rl_dataset)
# Ajustando o modelo de regressão linear com o rl_dataset
modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
rl_dataset[, c("Resposta.1", "Resposta.2")])
# Fazendo predições com novos valores de preditores
novos_preditores <- matrix(c(3, 4, 5, 2, 1, 6, 7, 3), nrow = 2, byrow = TRUE)
resultado_predicao <- predicao(modelo_exemplo, novos_preditores)
resultado_predicao$preditos
data(rl_dataset)
# Ajustando o modelo de regressão linear com o rl_dataset
modelo_exemplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
rl_dataset[, c("Resposta.1", "Resposta.2")])
# Gerando gráficos de verificação do modelo ajustado
# Gráfico de Valores Preditos x Observados
grafico(modelo_exemplo, tipo = "pvo")
# Gráfico de Resíduos x Preditoras
grafico(modelo_exemplo, tipo = "rvp")
# QQ-plot dos Resíduos
grafico(modelo_exemplo, tipo = "qqplot")
data(rl_dataset)
# Ajustando um modelo de regressão linear simples
modelo_simples <- reg_linear(rl_dataset[, "Preditora.1"], rl_dataset[, "Resposta.1"])
modelo_simples$coeficientes
# Ajustando um modelo de regressão linear múltipla
modelo_multiplo <- reg_linear(rl_dataset[, c("Preditora.1", "Preditora.2", "Preditora.3", "Preditora.4")],
rl_dataset[, c("Resposta.1", "Resposta.2")])
modelo_multiplo$coeficientes
# Ajustando um modelo com o dataset iris
modelo_iris <- reg_linear(iris[, 1], iris[, 2])
modelo_iris$coeficientes
#' RegLinearME918: Um Pacote para Regressão Linear Simples e Múltipla
#'
#' O pacote RegLinearME918 oferece ferramentas para ajustar modelos de regressão linear simples e múltipla, fazer predições com base nos modelos ajustados e gerar gráficos que ajudam a visualizar e analisar os resultados.
#'
#' @section Funções principais:
#' \itemize{
#'   \item \code{\link{reg_linear}}: Ajusta um modelo de regressão linear com base em variáveis preditoras e respostas.
#'   \item \code{\link{predicao}}: Realiza predições com base no modelo de regressão ajustado e novos dados preditores.
#'   \item \code{\link{grafico}}: Gera gráficos para visualizar comparações entre valores observados e preditos, resíduos e QQ-plots dos resíduos.
#' }
#'
#' @section Conjunto de dados:
#' O pacote inclui um conjunto de dados simulado, \code{\link{rl_dataset}}, que pode ser utilizado para testar as funções do pacote.
#'
#' @docType package
#' @name RegLinearME918
#' @keywords regressão linear, predição, gráficos, modelos estatísticos, dados simulados
#' @seealso \code{\link{reg_linear}}, \code{\link{predicao}}, \code{\link{grafico}}, \code{\link{rl_dataset}}
"_PACKAGE"
devtools::document()
rm(list = c("grafico", "predicao", "reg_linear"))
devtools::load_all()
devtools::document()
